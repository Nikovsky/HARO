// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  SKARBNIK
  SKARBNIK_REGION
  USER
}

enum UserRegion {
  DOLNOSLASKI
  GORNOSLASKI
  KUJAWSKO_POMORSKI
  LUBELSKI
  LODZKI
  MALOPOLSKI
  MAZOWIECKI
  PODKARPACKI
  POMORSKI
  POLNOCNO_ZACHODNI
  STAROPOLSKI
  WIELKOPOLSKI
}

model User {
  id                  String    @id @default(uuid())
  name                String?
  username            String?   @unique
  email               String?   @unique
  emailVerified       DateTime?
  image               String?
  password            String?   @db.Text
  isActive            Boolean   @default(true)
  isBlocked           Boolean   @default(false)
  isEmailConfirmed    Boolean   @default(false)
  twoFactorEnabled    Boolean   @default(false)
  failedLoginAttempts Int       @default(0)
  lastLoginAt         DateTime?

  role UserRole @default(USER)

  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  camp Camp[]
  created_entries Fico_Entry[] @relation("created_entries")
  updated_entries Fico_Entry[] @relation("updated_entries")
  userToCamps   UserToCamp[]
  regionAccess UserRegionAccess[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@index([username])
  @@index([isActive, role])
}

model Account {
  id                       String  @id @default(uuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  ip           String?
  deviceInfo   String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([ip])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

// Camp
model Camp {
  id              String   @id @default(uuid())
  name            String
  year            Int
  region          UserRegion
  isClosed        Boolean   @default(false)
  approvedAt      DateTime?

    // Podsumowania (dla PDF, kontroli, audytu)
  incomeSum       Float         @default(0)
  expenseSum      Float         @default(0)
  balanceFinal    Float         @default(0)

  ownerId          String
  owner           User @relation(fields: [ownerId], references: [id])

  entries         Fico_Entry[]
  participants    UserToCamp[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Fico_Entry {
  id_fico           String @id @default(uuid())
  fico_date    DateTime
  fico_description String

  lp Int

  bankDeposit Float?
  bankWithdrawal Float?

  // Wypłaty szczegółowe
  grantHq Float?
  grantEdu   Float?
  grantMuni Float?
  incomeActions Float?
  incomeParticipantFee Float?
  donationPrivate Float?
  donationOrg Float?
  incomeOnePercent Float?
  incomeOther Float?

  // Wydatki szczegółowe
  expEquipment Float?
  expMaterials Float?
  expCleaning Float?
  expOtherMaterials Float?
  expEnergy Float?
  expPhone Float?
  expRent Float?
  expPost Float?
  expBank Float?
  expCourier Float?
  expServices Float?
  expSalary Float?
  expInsuranceOC Float?
  expInsuranceNNW Float?
  expTravel Float?
  expFood Float?
  expRewards Float?
  expTickets Float?
  expAccommodation Float?
  expTransport Float?
  expOther Float?

  incomeTotal           Float
  expenseTotal          Float
  balance               Float

  campId String
  camp Camp @relation(fields: [campId], references: [id])

  createdById String
  updatedById String?

  createdBy User @relation("created_entries", fields: [createdById], references: [id])
  updatedBy User? @relation("updated_entries", fields: [updatedById], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([campId, lp])
}

model UserToCamp {
  id        String   @id @default(uuid())

  userId    String
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)

  campId    String
  camp      Camp @relation(fields: [campId], references: [id], onDelete: Cascade)

  accepted Boolean @default(false)

  @@unique([userId, campId])
}

model UserRegionAccess {
  id     String      @id @default(uuid())
  userId String
  region UserRegion

  user   User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, region])
}

